---
title: "testing-checking dynaSpec apr-2020"
author: "Marcelo Araya-Salas"
date: "November 23, 2016"
output: html_document
editor_options: 
  chunk_output_type: console
---

#uninstall dynaSpec 
```{r reinstall dynaSpec from github, eval=F}

remove.packages("dynaSpec")
# 
# #restart R
.rs.restartR()

```

# install packages
```{r packages, eval=T}

Sys.unsetenv("GITHUB_PAT")

rm(list = ls())
# 
# unload all non-based packages
out <- sapply(paste('package:', names(sessionInfo()$otherPkgs), sep = ""), function(x) try(detach(x, unload = FALSE, character.only = TRUE), silent = T))

x <- c("RColorBrewer", "devtools", "seewave", "maRce10/warbleR", "monitoR", "pkgdown", "ape", "spelling", "ggplot2", "png", "viridis"
       #, "maRce10/dynaSpec"
       )

out <- lapply(x, function(y) {
  
  # get pakage name
  pkg <- strsplit(y, "/")[[1]]
  pkg <- pkg[length(pkg)]
  
  # check if installed, if not then install 
  if (!pkg %in% installed.packages()[,"Package"])  {

      if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
    install.packages(y) 
    }

  # load package
  try(require(pkg, character.only = T), silent = T)
})


```

# functions
```{r functions}

#open function in rstudio
open.fun <- function(fun) system(paste("rstudio", file.path("./R", paste0(fun, ".R"))))

# run default arguments in a function
run.def.args <- function(fun = NULL){

  #list functions in package
rfiles <- list.files(pattern = ".R", path = "./R", full.names = T)

# select target function file
funfile <- rfiles[gsub(".R", "", basename(rfiles)) == fun]

  x <- readLines(funfile, warn = F)
  st <- grep('@usage', x, fixed = T)
  en <- grep('@param', x, fixed = T)[1]
  x <- paste(x[st:(en-1)], collapse = " ")  
  x <- gsub("usage|\\@|\\#\\'", "", x)

  b <- gregexpr(pattern ='\\(|\\)',x)[1][[1]]
  x <- substr(x, start = b[1] + 1, stop = b[length(b)] - 1)
  spltx <- strsplit(x, "\\,")[[1]]

sl <- vector()
  y = 1

      while(y <= length(spltx))
        {
        w <- spltx[y]
        z <- 1
        if(grepl('\\(', spltx[y])) 
          {z  <- 0
          while(!grepl('\\)', w))
          {
              z <- z+ 1
              w <- paste(w, ",", spltx[y + z], collapse = "")
          }
        z <- z + 1
          }
        
       y = y + z
       sl[length(sl) + 1] <- w
            }

  sl <- sl[sl != "X"]
  return(sl)
  }

# run it like this: 
# for(i in run.def.args("dfts")) try(eval(parse(text = i)), silent = T)

# remove sound files and or image files
rm.sf <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$", ignore.case = T, full.names = TRUE))

rm.sf.img <- function(mp3 = TRUE) {if(mp3)
  unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.mp3$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE)) else
      unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE))}

rm.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$|\\.pdf$", ignore.case = T, full.names = TRUE))

#open latest image
last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)))]
))

#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T, full.names = TRUE)))]
))

#find text in functions
find.text <- function(pattern, fun.only = FALSE, path = "./R", ignore.case = T)
  {
rfiles <- list.files(pattern = "\\.R$|\\.Rmd$", path = path, full.names = T, all.files = T)
  
#check where a word is found in each function an return the name of function where it was found and the time
res <- NULL
w <- 1
for(f in rfiles){
  x <- readLines(f)
  y <- grep(pattern, x, fixed = T, value = T, ignore.case = ignore.case)
  if(length(y)>0 & !fun.only) {
    print(gsub(pattern = "\\.R", "", (basename(f)))) 
    for(i in y) print(i)
  }
  if(length(y)>0 & fun.only) res[w] <- gsub(pattern = "\\.R", "", (basename(f))) 
# options(nwarnings = 0)
  w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}


#replace text
repl.text <- function(pattern, repl, path = "./R", ignore.case = T){
  rfiles <- list.files(pattern = "\\.R$|\\.Rmd", path = path, full.names = T, all.files = T)

    for(f in rfiles){
  
    #find and replace
      x <- readLines(f)
      y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
      cat(y, file=f, sep="\n")
  
  #reread
      x <- readLines(f)
      w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
      if(length(w)>0) {
          print(f) 
        for(i in w) print(i)
          }
    }
}

#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
  
  rfiles <- list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T)
  
  funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
  funs <-grep("zzz|data|package", funs, invert = T, value = T)
  
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
  if(any(grep(arg1, a))) return(x)
}      ))

if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
  if(any(grep(arg2, a))) return(x)
}      ))

res <- intersect(l1, l2)

} else res <- l1

return(res)

}

# run default arguments
run.def.args2 <-function(FUN)
{
  fm <- formals(FUN)

  
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]

fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))

for(i in fm) try(eval(parse(text = i)), silent = T)

}


#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
  
  f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)

return(intersect(f1, f2))
}
  
#big data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
  Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
  
  attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
  
  attr(Y, "check.results")$selec <- 1:nrow(Y)
  return(Y)
}

# run all fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))

run.all()

```

# check
```{r check}
#delete NAMESPACE file

unlink("./NAMESPACE")

#run document twice
devtools::document(".")
devtools::document(".")

#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)

```

# test and build package
```{r test and build package}

# check spelling
spch <- devtools::spell_check(".")

spch$word[grep("dynaSpec", spch$found)]

source('./R_package_testing/warbleR/Beta functions/random_sound.R')
random_sound(dur = 2, segment.dur.range = c(0.01, 0.9), frange = c(1, 2))

# check as in cran
system("R CMD check . --as-cran --resave-data")

# build tar.gz package file
setwd("./")
system("R CMD build . --resave-data")

# devtools::build()

unlink(list.files(pattern = "dynaSpec\\.pdf", path = "./"))

# only build manual 
setwd(".")
system("R CMD Rd2pdf ./R\ package\ testing/dynaSpec/dynaSpec")

setwd(".")

#built site
pkgdown::build_site()

# to set a new computer
## 1. install git
# 2. generate ssh key https://help.github.com/en/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#adding-your-ssh-key-to-the-ssh-agent
# 3. add key to github account https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account  


#sent to github
system("git add .")
system('git commit -m  "add loop and line control to scrolling_spectro()"')
system("git push origin master")

```

# find and replace text
```{r}

# list.files

path <- "./R"

pattern <-  "R package version 1.0.0"

find.text(pattern = pattern, fun.only = F, ignore.case = T, path = path)

repl <- "R package version 1.0.2"

repl.text(pattern = pattern, repl = repl, path = path)

# find.arg.text(arg1 = "parallel", arg2 = "pb", pattern = "pbmcapply")

```

## troubleshoot dynaSpec functions ####

```{r scrolling_spectro}

FUN <- "scrolling_spectro"

#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))

#open in rstudio
##open.fun(fun = FUN)

download.file(url = "http://marceloarayasalas.weebly.com/uploads/2/5/5/2/25524573/0.sur.2014.7.3.8.31.wav", 
    destfile = file.path(tempdir(), "example.wav"))

data(list = c("Phae.long1"))

# remove objects but no functions
rm(list = setdiff(ls(), c(lsf.str(), "FUN")))

# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)

#tests  

w <- readWave(file.path(tempdir(), "example.wav"))
# wave <- readWave(file.path(tempdir(), "Ph"))

w <- Phae.long1

w <- readWave("~/opt/Raven-1.5.0.0043/Examples/CanyonWren.wav")

data("canyon_wren")

scrolling_spectro(wave = canyon_wren, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 1000, height = 500, res = 120, file.name = "standard.mp4")

scrolling_spectro(wave = canyon_wren, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 1000, height = 500, res = 120, file.name = "black.mp4", colbg = "black")

scrolling_spectro(wave = canyon_wren, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 1000, height = 500, res = 120, file.name = "yellow.mp4", colbg = "yellow")

scrolling_spectro(wave = canyon_wren, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 1000, height = 500, res = 120, file.name = "slow.mp4", colbg = "black", speed = 0.5)

data("Cryp.soui")
scrolling_spectro(wave = Cryp.soui, wl = 600, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 3), width = 1000, height = 500, res = 120, file.name = "fast.mp4", colbg = "black", speed = 2)

data("Phae.long4")

sil <- silence(duration = 0.3, samp.rate = Phae.long4@samp.rate, xunit = "time")

wav2 <- pastew(sil, Phae.long4, output = "Wave")
pastew(wav2, Phae.long4, output = "Wave")

scrolling_spectro(wave = Phae.long4, wl = 300, t.display = 1.7, ovlp = 70, pal = magma, parallel = 3, grid = FALSE, flim = c(1, 10), width = 1000, height = 500, res = 120, collevels = seq(-50, 0, 5), file.name = "no_axis.mp4", colbg = "black", axis.type = "none")

print("all is good!")


## try this
# https://stackoverflow.com/questions/27800307/adding-a-picture-to-plot-in-r

```

### data objects

```{r create data objects}
# create data examples for dynaSpec

# read data Raven
canyon_wren <- readWave("~/opt/Raven-1.5.0.0043/Examples/CanyonWren.wav")


save(canyon_wren, file="./data/canyon_wren.rda", version = 2)

```
