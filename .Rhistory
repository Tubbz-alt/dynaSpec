)
out <- lapply(x, function(y) {
# get pakage name
pkg <- strsplit(y, "/")[[1]]
pkg <- pkg[length(pkg)]
# check if installed, if not then install
if (!pkg %in% installed.packages()[,"Package"])  {
if (grepl("/", y))  devtools::install_github(y, force = TRUE) else
install.packages(y)
}
# load package
try(require(pkg, character.only = T), silent = T)
})
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
#open function in rstudio
open.fun <- function(fun) system(paste("rstudio", file.path("./R", paste0(fun, ".R"))))
# run default arguments in a function
run.def.args <- function(fun = NULL){
#list functions in package
rfiles <- list.files(pattern = ".R", path = "./R", full.names = T)
# select target function file
funfile <- rfiles[gsub(".R", "", basename(rfiles)) == fun]
x <- readLines(funfile, warn = F)
st <- grep('@usage', x, fixed = T)
en <- grep('@param', x, fixed = T)[1]
x <- paste(x[st:(en-1)], collapse = " ")
x <- gsub("usage|\\@|\\#\\'", "", x)
b <- gregexpr(pattern ='\\(|\\)',x)[1][[1]]
x <- substr(x, start = b[1] + 1, stop = b[length(b)] - 1)
spltx <- strsplit(x, "\\,")[[1]]
sl <- vector()
y = 1
while(y <= length(spltx))
{
w <- spltx[y]
z <- 1
if(grepl('\\(', spltx[y]))
{z  <- 0
while(!grepl('\\)', w))
{
z <- z+ 1
w <- paste(w, ",", spltx[y + z], collapse = "")
}
z <- z + 1
}
y = y + z
sl[length(sl) + 1] <- w
}
sl <- sl[sl != "X"]
return(sl)
}
# run it like this:
# for(i in run.def.args("dfts")) try(eval(parse(text = i)), silent = T)
# remove sound files and or image files
rm.sf <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$", ignore.case = T, full.names = TRUE))
rm.sf.img <- function(mp3 = TRUE) {if(mp3)
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.mp3$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE)) else
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE))}
rm.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$|\\.pdf$", ignore.case = T, full.names = TRUE))
#open latest image
last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)))]
))
#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T, full.names = TRUE)))]
))
#find text in functions
find.text <- function(pattern, fun.only = FALSE, path = "./R", ignore.case = T)
{
rfiles <- list.files(pattern = "\\.R$|\\.Rmd$", path = path, full.names = T, all.files = T)
#check where a word is found in each function an return the name of function where it was found and the time
res <- NULL
w <- 1
for(f in rfiles){
x <- readLines(f)
y <- grep(pattern, x, fixed = T, value = T, ignore.case = ignore.case)
if(length(y)>0 & !fun.only) {
print(gsub(pattern = "\\.R", "", (basename(f))))
for(i in y) print(i)
}
if(length(y)>0 & fun.only) res[w] <- gsub(pattern = "\\.R", "", (basename(f)))
# options(nwarnings = 0)
w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}
#replace text
repl.text <- function(pattern, repl, path = "./R", ignore.case = T){
rfiles <- list.files(pattern = "\\.R$|\\.Rmd", path = path, full.names = T, all.files = T)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#big data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
# run all fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
run.all()
FUN <- "scrolling_spectro"
data("canyon_wren")
# fast
scrolling_spectro(wave = canyon_wren, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 600, height = 200, res = 100, file.name = "../fast.mp4", ovlp = 5, fps = 20, buffer = 0, loop = 2, lower.spectro = T, fix.time = T, height.prop = c(4, 1))
# fast oscillo
scrolling_spectro(wave = canyon_wren, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 600, height = 200, res = 100, file.name = "fast.mp4", ovlp = 5, fps = 20, buffer = 0, loop = 2, lower.spectro = T, fix.time = T, height.prop = c(4, 1), osc = T, colbg= "red")
# spectro call
data(list = c("Phae.long1", "lbh_selec_table"))
# subset selection table
st <- lbh_selec_table[lbh_selec_table$sound.files == "Phae.long4.wav",]
# spectro call
data(list = c("Phae.long4", "lbh_selec_table"))
# subset selection table
st <- lbh_selec_table[lbh_selec_table$sound.files == "Phae.long4.wav",]
# create color column
st$colors <- viridis(3)
# highlight selections
color.spectro(wave = Phae.long4, wl = 300, ovlp = 90, flim = c(1, 8.6), collevels = seq(-90, 0, 5),
dB = "B", X = st, col.clm = "colors", base.col = "skyblue",  t.mar = 0.07, f.mar = 0.1,
interactive = NULL)
sp_cl <- call("color.spectro", wave = Phae.long4, wl = 300, ovlp = 90, flim = c(1, 8.6), collevels = seq(-90, 0, 5),
dB = "B", X = st, col.clm = "colors", base.col = "skyblue",  t.mar = 0.07, f.mar = 0.1,
interactive = NULL)
scrolling_spectro(wave = Phae.long4, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 600, height = 200, res = 100, file.name = "../color_spectro.mp4", ovlp = 5, fps = 50, buffer = 1, loop = 1, lower.spectro = T, fix.time = T, height.prop = c(4, 1), spectro.call = sp_cl, osc = F, speed = 0.5)
scrolling_spectro(wave = Phae.long4, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 600, height = 200, res = 100, file.name = "../color_spectro.mp4", ovlp = 5, fps = 50, buffer = 1, loop = 1, lower.spectro = T, fix.time = T, height.prop = c(4, 1), spectro.call = sp_cl, osc = F, speed = 0.5, colbg = "black")
# highlight selections black background
color.spectro(wave = Phae.long4, wl = 300, ovlp = 90, flim = c(2, 5), collevels = seq(-100, 0, 5),
dB = "B", X = st, col.clm = "colors", base.col = "red",  t.mar = 0.07, f.mar = 0.1,
interactive = NULL, bg.col = "black")
sp_cl <- call("color.spectro", wave = Phae.long4, wl = 300, ovlp = 90, flim = c(2, 5), collevels = seq(-100, 0, 5),
dB = "B", X = st, col.clm = "colors", base.col = "red",  t.mar = 0.07, f.mar = 0.1,
interactive = NULL, bg.col = "black")
scrolling_spectro(wave = Phae.long4, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 600, height = 200, res = 100, file.name = "../color_spectro.mp4", ovlp = 95, fps = 50, buffer = 1, loop = 3, lower.spectro = T, fix.time = T, height.prop = c(4, 1), spectro.call = sp_cl, osc = F, speed = 0.5, colbg = "black")
sp_cl <- call("color.spectro", wave = Phae.long4, wl = 300, ovlp = 90, flim = c(2, 10), collevels = seq(-100, 0, 5),
dB = "B", X = st, col.clm = "colors", base.col = "red",  t.mar = 0.07, f.mar = 0.1,
interactive = NULL, bg.col = "black")
scrolling_spectro(wave = Phae.long4, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 600, height = 200, res = 100, file.name = "../color_spectro.mp4", ovlp = 95, fps = 50, buffer = 1, loop = 3, lower.spectro = T, fix.time = T, height.prop = c(4, 1), spectro.call = sp_cl, osc = F, speed = 0.5, colbg = "black")
scrolling_spectro(wave = Phae.long4, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 600, height = 200, res = 100, file.name = "../color_spectro.mp4", ovlp = 95, fps = 50, buffer = 1, loop = 1, lower.spectro = T, fix.time = T, height.prop = c(4, 1), spectro.call = sp_cl, osc = F, speed = 0.5, colbg = "black")
sp_cl <- call("color.spectro", wave = Phae.long4, wl = 300, ovlp = 90, flim = c(2, 10), collevels = seq(-100, 0, 5),
dB = "B", X = st, col.clm = "colors", base.col = "black",  t.mar = 0.07, f.mar = 0.1,
interactive = NULL, bg.col = "black")
scrolling_spectro(wave = Phae.long4, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 600, height = 200, res = 100, file.name = "../color_spectro.mp4", ovlp = 95, fps = 50, buffer = 1, loop = 1, lower.spectro = T, fix.time = T, height.prop = c(4, 1), spectro.call = sp_cl, osc = F, speed = 0.5, colbg = "black")
# for calls added at the start segment
Y <- spectro.call$X[spectro.call$X$start <= (t.display / 2), ]
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
X
X <- st
spectro.call = sp_cl
# for calls added at the start segment
Y <- spectro.call$X[spectro.call$X$start <= (t.display / 2), ]
t.display = 1.7
# for calls added at the start segment
Y <- spectro.call$X[spectro.call$X$start <= (t.display / 2), ]
duration(wave)
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
wave
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = Phae.long4, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 600, height = 200, res = 100, file.name = "../color_spectro.mp4", ovlp = 95, fps = 50, buffer = 1, loop = 2, lower.spectro = T, fix.time = T, height.prop = c(4, 1), spectro.call = sp_cl, osc = F, speed = 0.5, colbg = "black")
sp_cl <- call("color.spectro", wave = Phae.long4, wl = 300, ovlp = 90, flim = c(2, 10), collevels = seq(-100, 0, 5),
dB = "B", X = st, col.clm = "colors", base.col = "black",  t.mar = 0.07, f.mar = 0.1,
interactive = NULL, bg.col = "black")
scrolling_spectro(wave = Phae.long4, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 600, height = 200, res = 100, file.name = "../color_spectro.mp4", ovlp = 95, fps = 50, buffer = 1, loop = 2, lower.spectro = T, fix.time = T, height.prop = c(4, 1), spectro.call = sp_cl, osc = F, speed = 0.5, colbg = "black")
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = Phae.long4, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 600, height = 200, res = 100, file.name = "../color_spectro.mp4", ovlp = 95, fps = 50, buffer = 1, loop = 2, lower.spectro = T, fix.time = T, height.prop = c(4, 1), spectro.call = sp_cl, osc = F, speed = 0.5, colbg = "black")
scrolling_spectro(wave = Phae.long4, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 600, height = 200, res = 100, file.name = "../color_spectro.mp4", ovlp = 95, fps = 50, buffer = 1, loop = 2, lower.spectro = T, fix.time = T, height.prop = c(4, 1), spectro.call = sp_cl, osc = F, speed = 0.5, colbg = "white")
sp_cl <- call("color.spectro", wave = Phae.long4, wl = 300, ovlp = 90, flim = c(2, 10), collevels = seq(-100, 0, 5),
dB = "B", X = st, col.clm = "colors", base.col = "white",  t.mar = 0.07, f.mar = 0.1,
interactive = NULL, bg.col = "white")
scrolling_spectro(wave = Phae.long4, wl = 300, t.display = 1.7, pal = viridis, parallel = 3, grid = FALSE, flim = c(1, 9), width = 600, height = 200, res = 100, file.name = "../color_spectro.mp4", ovlp = 95, fps = 50, buffer = 1, loop = 2, lower.spectro = T, fix.time = T, height.prop = c(4, 1), spectro.call = sp_cl, osc = F, speed = 0.5, colbg = "white")
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
# check spelling
spch <- devtools::spell_check(".")
spch$word[grep("dynaSpec", spch$found)]
#built site
pkgdown::build_site()
#sent to github
system("git add .")
system('git commit -m  "added call.spectro to scrolling_spectro()"')
#sent to github
system("git add .")
system('git commit -m  "remove video"')
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
#built site
pkgdown::build_site()
system('git commit -m  "bug fix after call.spectro added"')
#sent to github
system("git add .")
system('git commit -m  "bug fix after call.spectro added"')
#sent to github
system("git add .")
system('git commit -m  "bug fix after call.spectro added 2"')
#built site
pkgdown::build_site()
#sent to github
system("git add .")
system('git commit -m  "bug fix after call.spectro added 3"')
st
st <- imp_raven(warbler.format = TRUE)
library(Rraven)
st <- imp_raven(warbler.format = TRUE)
setwd("/home/m/sda5/Dropbox/Manuscripts/house_wren_singing_overlap")
st <- imp_raven(warbler.format = TRUE)
check_sels(st)
library(dynaSpec)
library(viridis)
library(tuneR)
library(seewave)
library(warbleR)
st <- imp_raven(warbler.format = TRUE)
check_sels(st)
st
st$sound.files <- "house_wren_male_female_duet.wav"
st$selec.file <- NULL
st
st <- warbleR::sort_colms(st)
st
st$Channel <- NULL
write.csv(st, "house_wren_male_female_duet.wav", row.names = FALSE)
getwd()
write.csv(st, "house_wren_male_female_duet.csv", row.names = FALSE)
st <- read.csv("https://ndownloader.figshare.com/files/22722404"")
st <- read.csv("https://ndownloader.figshare.com/files/22722404")
st
scan.url("https://ndownloader.figshare.com/files/22722101")
myfile <- getURL('https://ndownloader.figshare.com/files/22722101', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
library(RCurl)
myfile <- getURL('https://ndownloader.figshare.com/files/22722101', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
scan.url("https://ndownloader.figshare.com/files/22722101")
myfile
myfile <- getURL('https://ndownloader.figshare.com/files/22722101', ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile
remove.packages("warbleR")
# From github
devtools::install_github("maRce10/warbleR")
#load package
library(warbleR)
ngh_wren <- read_wave("https://www.xeno-canto.org/518334/download")
# get house wren male female duet recording
hs_wren <- read_wave("https://ndownloader.figshare.com/files/22722101")
# and extended selection table
st <- read.csv("https://ndownloader.figshare.com/files/22722404")
# get house wren male female duet recording
hs_wren <- read_wave("https://ndownloader.figshare.com/files/22722101")
# and extended selection table
st <- read.csv("https://ndownloader.figshare.com/files/22722404")
# create color column
st$colors <- c("green", "yellow")
# highlight selections
color.spectro(wave = w1, wl = 200, ovlp = 95, flim = c(1, 13), collevels = seq(-55, 0, 5),
dB = "B", X = st, col.clm = "colors", base.col = "black",  t.mar = 0.07, f.mar = 0.1, strength = 3,
interactive = NULL, bg.col = "black")
color.spectro(wave = hs_wren, wl = 200, ovlp = 95, flim = c(1, 13), collevels = seq(-55, 0, 5),
dB = "B", X = st, col.clm = "colors", base.col = "black",  t.mar = 0.07, f.mar = 0.1, strength = 3,
interactive = NULL, bg.col = "black")
st2$colors <- c("gray", "gray49")
st$colors <- c("gray", "gray49")
sp_cl <- call("color.spectro", wave = hs_wren, wl = 200, ovlp = 95, flim = c(1, 13), collevels = seq(-55, 0, 5),
dB = "B", X = st, col.clm = "colors", base.col = "white",  t.mar = 0.07, f.mar = 0.1, strength = 3,
interactive = NULL)
scrolling_spectro(wave = hs_wren, wl = 512, osc = TRUE,
t.display = 1.2, pal = reverse.gray.colors.1,
grid = FALSE, flim = c(1, 13), loop = 3,
width = 1000, height = 500, res = 120,
collevels = seq(-100, 0, 1),
spectro.call = sp_cl, fps = 60,
file.name = "gray.mp4")
library(dynaSpec)
scrolling_spectro(wave = hs_wren, wl = 512, osc = TRUE,
t.display = 1.2, pal = reverse.gray.colors.1,
grid = FALSE, flim = c(1, 13), loop = 3,
width = 1000, height = 500, res = 120,
collevels = seq(-100, 0, 1),
spectro.call = sp_cl, fps = 60,
file.name = "gray.mp4")
getwd()
# create color column
st$colors <- c("green", "yellow")
tiff(filename = "colored_spectro_house_wren_duet.tiff", width = 2000, height = 700, res = 200)
color.spectro(wave = w2, wl = 200, ovlp = 95, flim = c(1, 13), collevels = seq(-55, 0, 5),
dB = "B", X = st2, col.clm = "colors", base.col = "black",  t.mar = 0.07, f.mar = 0.1, strength = 3,
interactive = NULL, bg.col = "black")
color.spectro(wave = hs_wren, wl = 200, ovlp = 95, flim = c(1, 13), collevels = seq(-55, 0, 5),
dB = "B", X = st2, col.clm = "colors", base.col = "black",  t.mar = 0.07, f.mar = 0.1, strength = 3,
interactive = NULL, bg.col = "black")
color.spectro(wave = hs_wren, wl = 200, ovlp = 95, flim = c(1, 13), collevels = seq(-55, 0, 5),
dB = "B", X = st, col.clm = "colors", base.col = "black",  t.mar = 0.07, f.mar = 0.1, strength = 3,
interactive = NULL, bg.col = "black")
dev.off()
st$colors <- viridis(10)[c(3, 8)]
library(viridis)
st$colors <- viridis(10)[c(3, 8)]
sp_cl <- call("color.spectro", wave = hs_wren, wl = 200, ovlp = 95, flim = c(1, 13), collevels = seq(-55, 0, 5),
dB = "B", X = st, col.clm = "colors", base.col = "white",  t.mar = 0.07, f.mar = 0.1, strength = 3,
interactive = NULL)
scrolling_spectro(wave = hs_wren, wl = 512, osc = TRUE,
t.display = 1.2, pal = reverse.gray.colors.1,
grid = FALSE, flim = c(1, 13), loop = 3,
width = 1000, height = 500, res = 120,
collevels = seq(-100, 0, 1),
spectro.call = sp_cl, fps = 60,
file.name = "viridis.mp4")
# create dynamic spectrogram
scrolling_spectro(wave = hs_wren, wl = 200, osc = TRUE,
t.display = 1.2, pal = reverse.gray.colors.1,
grid = FALSE, flim = c(1, 13), loop = 3,
width = 1000, height = 500, res = 120,
collevels = seq(-100, 0, 1), colwave = viridis(10)[c(2, 8)],
spectro.call = sp_cl, fps = 60,
file.name = "viridis.mp4")
# create dynamic spectrogram
scrolling_spectro(wave = hs_wren, wl = 200, osc = TRUE,
t.display = 1.2, pal = reverse.gray.colors.1,
grid = FALSE, flim = c(1, 13), loop = 3,
width = 1000, height = 500, res = 120,
collevels = seq(-100, 0, 1), colwave = viridis(10)[c(9)],
spectro.call = sp_cl, fps = 60,
file.name = "viridis.mp4")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
setwd("~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec")
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
#delete NAMESPACE file
unlink("./NAMESPACE")
#run document twice
devtools::document(".")
devtools::document(".")
#check with devtools
devtools::check(".", document = TRUE, run_dont_test = FALSE)
#built site
pkgdown::build_site()
#sent to github
system("git add .")
system('git commit -m  "added spectro.call to scrolling_spectro()"')
# From CRAN would be
#install.packages("dynaSpec")
#load package
library(dynaSpec)
# and load other dependencies
library(viridis)
library(tuneR)
library(seewave)
# get house wren male female duet recording
hs_wren <- read_wave("https://ndownloader.figshare.com/files/22722101")
#load package
library(warbleR)
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
# get house wren male female duet recording
hs_wren <- read_wave("https://ndownloader.figshare.com/files/22722101")
# and extended selection table
st <- read.csv("https://ndownloader.figshare.com/files/22722404")
# create color column
st$colors <- c("green", "yellow")
st$colors <- viridis(10)[c(3, 8)]
sp_cl <- call("color.spectro", wave = hs_wren, wl = 200,
ovlp = 95, flim = c(1, 13), collevels = seq(-55, 0, 5),
dB = "B", X = st, col.clm = "colors",
base.col = "white", t.mar = 0.07, f.mar = 0.1,
strength = 3, interactive = NULL)
# create dynamic spectrogram
scrolling_spectro(wave = hs_wren, wl = 200, osc = TRUE,
t.display = 1.2, pal = reverse.gray.colors.1,
grid = FALSE, flim = c(1, 13), loop = 3,
width = 1000, height = 500, res = 120,
collevels = seq(-100, 0, 1), colwave = viridis(10)[c(9)],
spectro.call = sp_cl, fps = 60,
file.name = "viridis.mp4")
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/oscillo_dynaspec_int.R')
# create dynamic spectrogram
scrolling_spectro(wave = hs_wren, wl = 200, osc = TRUE,
t.display = 1.2, pal = reverse.gray.colors.1,
grid = FALSE, flim = c(1, 13), loop = 3,
width = 1000, height = 500, res = 120,
collevels = seq(-100, 0, 1), colwave = viridis(10)[c(9)],
spectro.call = sp_cl, fps = 60,
file.name = "viridis.mp4")
open_wd(tempdir())
# create dynamic spectrogram
scrolling_spectro(wave = hs_wren, wl = 200, osc = TRUE,
t.display = 2, pal = reverse.gray.colors.1,
grid = FALSE, flim = c(1, 13), loop = 3,
width = 1000, height = 500, res = 120,
collevels = seq(-100, 0, 1), colwave = viridis(10)[c(9)],
spectro.call = sp_cl, fps = 6,
file.name = "viridis.mp4")
# create dynamic spectrogram
scrolling_spectro(wave = hs_wren, wl = 200, osc = TRUE,
t.display = 2.3, pal = reverse.gray.colors.1,
grid = FALSE, flim = c(1, 13), loop = 3,
width = 1000, height = 500, res = 120,
collevels = seq(-100, 0, 1), colwave = viridis(10)[c(9)],
spectro.call = sp_cl, fps = 12,
file.name = "viridis.mp4")
# create dynamic spectrogram
scrolling_spectro(wave = hs_wren, wl = 200, osc = TRUE,
t.display = 2.7, pal = reverse.gray.colors.1,
grid = FALSE, flim = c(1, 13), loop = 3,
width = 1200, height = 500, res = 120,
collevels = seq(-100, 0, 1), colwave = viridis(10)[c(9)],
spectro.call = sp_cl, fps = 12,
file.name = "viridis.mp4")
# create dynamic spectrogram
scrolling_spectro(wave = hs_wren, wl = 200, osc = TRUE,
t.display = 2.7, pal = reverse.gray.colors.1,
grid = FALSE, flim = c(1, 13), loop = 3,
width = 1200, height = 500, res = 120,
collevels = seq(-100, 0, 1), colwave = viridis(10)[c(9)],
spectro.call = sp_cl, fps = 12,
file.name = "viridis.mp4", lwd = 0)
# create dynamic spectrogram
scrolling_spectro(wave = hs_wren, wl = 200, osc = TRUE,
t.display = 3, pal = reverse.gray.colors.1,
grid = FALSE, flim = c(1, 13), loop = 3,
width = 1200, height = 500, res = 120,
collevels = seq(-100, 0, 1), colwave = viridis(10)[c(9)],
spectro.call = sp_cl, fps = 12,
file.name = "viridis.mp4", lwd = 0)
# create dynamic spectrogram
scrolling_spectro(wave = hs_wren, wl = 200, osc = TRUE,
t.display = 3.5, pal = reverse.gray.colors.1,
grid = FALSE, flim = c(1, 13), loop = 3,
width = 1200, height = 500, res = 120,
collevels = seq(-100, 0, 1), colwave = viridis(10)[c(9)],
spectro.call = sp_cl, fps = 12,
file.name = "viridis.mp4", lwd = 0)
