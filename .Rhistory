# run default arguments in a function
run.def.args <- function(fun = NULL){
#list functions in package
rfiles <- list.files(pattern = ".R", path = "./R", full.names = T)
# select target function file
funfile <- rfiles[gsub(".R", "", basename(rfiles)) == fun]
x <- readLines(funfile, warn = F)
st <- grep('@usage', x, fixed = T)
en <- grep('@param', x, fixed = T)[1]
x <- paste(x[st:(en-1)], collapse = " ")
x <- gsub("usage|\\@|\\#\\'", "", x)
b <- gregexpr(pattern ='\\(|\\)',x)[1][[1]]
x <- substr(x, start = b[1] + 1, stop = b[length(b)] - 1)
spltx <- strsplit(x, "\\,")[[1]]
sl <- vector()
y = 1
while(y <= length(spltx))
{
w <- spltx[y]
z <- 1
if(grepl('\\(', spltx[y]))
{z  <- 0
while(!grepl('\\)', w))
{
z <- z+ 1
w <- paste(w, ",", spltx[y + z], collapse = "")
}
z <- z + 1
}
y = y + z
sl[length(sl) + 1] <- w
}
sl <- sl[sl != "X"]
return(sl)
}
# run it like this:
# for(i in run.def.args("dfts")) try(eval(parse(text = i)), silent = T)
# remove sound files and or image files
rm.sf <- function() unlink(list.files(path = tempdir(), pattern = "\\.wav$", ignore.case = T, full.names = TRUE))
rm.sf.img <- function(mp3 = TRUE) {if(mp3)
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.mp3$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE)) else
unlink(list.files(path = tempdir(), pattern = "\\.wav$|\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$", ignore.case = T, full.names = TRUE))}
rm.img <- function() unlink(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$|\\.png$|\\.pdf$", ignore.case = T, full.names = TRUE))
#open latest image
last.img <- function() system(paste("eog", list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.tiff$|\\.jpeg$|\\.jpg$", ignore.case = T, full.names = TRUE)))]
))
#open pdf
last.pdf <- function() system(paste("xdg-open", list.files(path = tempdir(), pattern = "\\.pdf$", ignore.case = T, full.names = TRUE)[which.max(file.mtime(list.files(path = tempdir(), pattern = "\\.pdf", ignore.case = T, full.names = TRUE)))]
))
#find text in functions
find.text <- function(pattern, fun.only = FALSE, path = "./R", ignore.case = T)
{
rfiles <- list.files(pattern = "\\.R$|\\.Rmd$", path = path, full.names = T, all.files = T)
#check where a word is found in each function an return the name of function where it was found and the time
res <- NULL
w <- 1
for(f in rfiles){
x <- readLines(f)
y <- grep(pattern, x, fixed = T, value = T, ignore.case = ignore.case)
if(length(y)>0 & !fun.only) {
print(gsub(pattern = "\\.R", "", (basename(f))))
for(i in y) print(i)
}
if(length(y)>0 & fun.only) res[w] <- gsub(pattern = "\\.R", "", (basename(f)))
# options(nwarnings = 0)
w = w + 1
}
if(fun.only)
{res <- res[!is.na(res)]
return(res)}
}
#replace text
repl.text <- function(pattern, repl, path = "./R", ignore.case = T){
rfiles <- list.files(pattern = "\\.R$|\\.Rmd", path = path, full.names = T, all.files = T)
for(f in rfiles){
#find and replace
x <- readLines(f)
y <- gsub(pattern, repl, x, fixed = T, ignore.case = ignore.case)
cat(y, file=f, sep="\n")
#reread
x <- readLines(f)
w <- grep(repl, x, fixed = T, value = T, ignore.case = T)
if(length(w)>0) {
print(f)
for(i in w) print(i)
}
}
}
#find functions with specific arguments
find.arg <- function(arg1, arg2 = NULL){
rfiles <- list.files(pattern = "\\.R$", path = "./R", full.names = T, all.files = T)
funs <- gsub(pattern = "\\.R", "", (basename(rfiles)))
funs <-grep("zzz|data|package", funs, invert = T, value = T)
l1 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg1, a))) return(x)
}      ))
if(!is.null(arg2))
{l2 <- unlist(lapply(funs, function(x)
{  a <-  try(run.def.args(x), silent = T)
if(any(grep(arg2, a))) return(x)
}      ))
res <- intersect(l1, l2)
} else res <- l1
return(res)
}
# run default arguments
run.def.args2 <-function(FUN)
{
fm <- formals(FUN)
fm <- fm[sapply(fm, length) > 0 | sapply(fm, is.null)]
fm <- lapply(1:length(fm), function(x) paste(names(fm)[x], "=", fm[x]))
for(i in fm) try(eval(parse(text = i)), silent = T)
}
#find functions with specific arguments and text
find.arg.text <- function(arg1, arg2 = NULL, pattern) {
f1 <- find.text(pattern = pattern, fun.only = T)
f2 <- find.arg(arg1 = arg1, arg2 = arg2)
return(intersect(f1, f2))
}
#big data set
big.seltab <- function(X, nrow = 100){
Y <- X[rep(1:nrow(X), ceiling(nrow/nrow(X)))[1:nrow],]
Y$selec <- 1:nrow(Y)
if(is_selection_table(Y) | is_extended_selection_table(Y))
attr(Y, "check.results") <- attr(X, "check.results")[rep(1:nrow(attr(X, "check.results")), ceiling(nrow/nrow(attr(X, "check.results"))))[1:nrow],]
attr(Y, "check.results")$selec <- 1:nrow(Y)
return(Y)
}
# run all fuctions
run.all <- function() invisible(lapply(list.files(pattern = "\\.R", path = "./R", full.names = T, all.files = T), function(x) try(source(x), silent = T)))
run.all()
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
rm(i)
FUN <- "scrolling_spectro"
#run function
run.all()
source(file.path("./R", paste0(FUN, ".R")))
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
setwd("~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec")
# to troubleshoot internally
for(i in run.def.args(FUN)) try(eval(parse(text = i)), silent = T)
wave = Phae.long1
hop.size = 11.6
wl = NULL
ovlp = 50
speed = 1
fps = 50
t.display = 1.5
collevels = seq(-40, 0, 5)
pal = reverse.gray.colors.2
parallel = 1
pb = TRUE
#margin
marg <- t.display / 2
#add silence
wav <-pastew(wave2 = silence(duration = marg, samp.rate = wave@samp.rate,
xunit = "time"), wave1 = wave, f = wave@samp.rate,
output = "Wave")
wav <-pastew(wave1 = silence(duration = marg, samp.rate = wav@samp.rate,
xunit = "time"), wave2 = wav, f = wav@samp.rate,
output = "Wave")
# resample to 44.1 kHz
wav <- resamp(wave = wav, f = wav@samp.rate, g = 44100, output = "Wave")
tiff(file.path(tempdir(), "fee%04d.tiff"),res = res, width = 1100, height = 700)
x <- 0
res = 70
#start graphic device to create image files
tiff(file.path(tempdir(), "fee%04d.tiff"),res = res, width = 1100, height = 700)
x <- 0
#loop to create image files
repeat{
tlim <- c(x, x + t.display)
spectro(wave = wav, f = wav@samp.rate, wl = 300, ovlp = 90,
flim = c(2, 10.5), tlim = tlim, scale = F, grid = F,
palette = gray.colors,  norm = F, dBref = 2*10e-5,
osc = T, colgrid="white", colwave="chocolate2",
colaxis="white", collab="white", colbg="black")
abline(v = tlim[1]+marg, lty = 2, col = "skyblue", lwd = 2)
x <- x + 1/fps
# stop when the end is reached
if(x >= (length(wav@left)/wav@samp.rate) - t.display) break
}
dev.off()
# temporary file names
temp.audio <- file.path(tempdir(), "audio.scroll.spectro.wav")
temp.video <- file.path(tempdir(), "scroll.spectro.temp.mp4")
# save audio file
writeWave(object = wav1, filename = temp.audio, extensible = FALSE)
# save audio file
writeWave(object = wav, filename = temp.audio, extensible = FALSE)
# save audio file
suppressWarnings(tuneR::writeWave(object = wav, filename = temp.audio, extensible = FALSE))
# put together call for ffmpeg
cll <- paste0("ffmpeg -framerate ", fps, " -i ", tempdir(), "/fee%04d.tiff -c:v libx264 -profile:v high -crf 2 -pix_fmt yuv420p ", temp.video)
# put together call for ffmpeg
cll <- paste0("ffmpeg -framerate ", fps, " -i ", tempdir(), "/fee%04d.tiff -c:v libx264 -profile:v high -crf 2 -pix_fmt yuv420p -y ", temp.video)
cll
# add audio
cll2 <- paste0("ffmpeg -i ", temp.video, " i ", temp.audio, " -vcodec libx264 -acodec libmp3lame -shortest -y scroll.spectro.mp4")
cll2
unlink(c(temp.video, temp.audio, list.files(path = tempdir(), full.names = TRUE, pattern = "\\d.tiff$")))
open_wd(tempdir())
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = Phae.long1, hop.size = 11.6, wl = NULL, ovlp = 50, speed = 1, fps = 50, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 1, pb = TRUE)
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = Phae.long1, hop.size = 11.6, wl = NULL, ovlp = 50, speed = 1, fps = 50, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 1, pb = TRUE)
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = Phae.long1, hop.size = 11.6, wl = NULL, ovlp = 50, speed = 1, fps = 50, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 1, pb = TRUE)
w <- pastew(Phae.long1, Phae.long2)
w <- pastew(Phae.long1, Phae.long2, output = "Wave")
w
scrolling_spectro(wave = w, hop.size = 11.6, wl = NULL, ovlp = 50, speed = 1, fps = 50, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 1, pb = TRUE)
scrolling_spectro(wave = w, hop.size = 11.6, wl = NULL, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 1, pb = TRUE)
w <- Phae.long1
scrolling_spectro(wave = w, hop.size = 11.6, wl = NULL, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 1, pb = TRUE)
scroll.spectro.mp4
file.show("scroll.spectro.mp4")
shell.exec("scroll.spectro.mp4")
apropos("open")
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = w, hop.size = 11.6, wl = NULL, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 1, pb = TRUE)
open_wd(tempdir())
w <- Phae.long1
w
list.files(path = tempdir(), full.names = TRUE, pattern = "\\d.tiff$")
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = w, hop.size = 11.6, wl = NULL, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 1, pb = TRUE)
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = w, hop.size = 11.6, wl = NULL, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 1, pb = TRUE)
t.display
x
x <- 0
duration(wav)
fps
duration(wav) * fps
# number of frames
frames <- round(duration(wav) * fps, 0)
frames
duration(wav) / frames
# time increase between frames
step_time <- duration(wav) / frames
step_time
marg
x = 1
c(x - 1, x + marg)
t.display
c(x - 1, x + t.display)
x = 2
0:frames[-1]
0:(frames)[-1]
frames
0:(frames - 1)
x = 0
x * step_time
x * step_time
x= 1
tlim <- c(x * step_time, x * step_time + t.display)
tlim
tlim <- c((x - 1) * step_time, (x - 1) * step_time + t.display)
tlim
sprintf("%06d", 1:frames)
max(frames)
nchar(frames)
sprintf("%6d", 1:frames)
sprintf("%06d", 1:frames)
sprintf(paste0("%0",nchar(frames), "d"), 1:frames)
sprintf(paste0("%0",nchar(frames) + 1, "d"), 1:frames)
img_names <- sprintf(paste0("%0",nchar(frames) + 1, "d"), 1:frames)
img_names
img_names <- paste0(sprintf(paste0("%0",nchar(frames) + 1, "d"), 1:frames), ".temp.img.tiff")
img_names
x = 1
out <- pbapply::pblapply(1:frames, function(x){
tlim <- c((x - 1) * step_time, (x - 1) * step_time + t.display)
tiff(file.path(tempdir(), img_names[x]),res = res, width = 1100, height = 700)
spectro(wave = wav, f = wav@samp.rate, wl = 300, ovlp = 90,
flim = c(2, 10.5), tlim = tlim, scale = F, grid = F,
palette = gray.colors,  norm = F, dBref = 2*10e-5,
osc = T, colgrid="white", colwave="chocolate2",
colaxis="white", collab="white", colbg="black")
abline(v = tlim[1]+marg, lty = 2, col = "skyblue", lwd = 2)
})
#
#   abline(v = tlim[1]+marg, lty = 2, col = "skyblue", lwd = 2)
#
#   x <- x + 1/fps
#
#   # stop when the end is reached
#   if(x >= (length(wav@left)/wav@samp.rate) - t.display) break
#
# }
#
dev.off()
height = 700
wl
# adjust wl based on hope.size
if (is.null(wl))
wl <- round(attr(X, "check.results")$sample.rate[1] * hop.size, 0)
# make wl even if odd
if ((wl %% 2) == 0) wl <- wl + 1
# adjust wl based on hope.size
if (is.null(wl))
wl <- round(wav@samp.rate[1] * hop.size, 0)
# make wl even if odd
if ((wl %% 2) == 0) wl <- wl + 1
wl
wav@samp.rate
# adjust wl based on hope.size
if (is.null(wl))
wl <- round(wav@samp.rate * hop.size / 1000, 0)
wl <- round(wav@samp.rate * hop.size / 1000, 0)
wl
out <- pbapply::pblapply(1:frames, function(x){
tlim <- c((x - 1) * step_time, (x - 1) * step_time + t.display)
tiff(file.path(tempdir(), img_names[x]),res = res, width = width, height = height)
spectro(wave = wav, f = wav@samp.rate, wl = 300, ovlp = 90,
flim = c(2, 10.5), tlim = tlim, scale = F, grid = F,
palette = gray.colors,  norm = F, dBref = 2*10e-5,
osc = T, colgrid="white", colwave="chocolate2",
colaxis="white", collab="white", colbg="black")
abline(v = tlim[1] + (t.display / 2), lty = 2, col = "skyblue", lwd = 2)
dev.off()
})
width = 1100
out <- pbapply::pblapply(1:frames, function(x){
tlim <- c((x - 1) * step_time, (x - 1) * step_time + t.display)
tiff(file.path(tempdir(), img_names[x]),res = res, width = width, height = height)
spectro(wave = wav, f = wav@samp.rate, wl = 300, ovlp = 90,
flim = c(2, 10.5), tlim = tlim, scale = F, grid = F,
palette = gray.colors,  norm = F, dBref = 2*10e-5,
osc = T, colgrid="white", colwave="chocolate2",
colaxis="white", collab="white", colbg="black")
abline(v = tlim[1] + (t.display / 2), lty = 2, col = "skyblue", lwd = 2)
dev.off()
})
w <- Phae.long1
w
wave = w
# hopsize
if (!is.numeric(hop.size) | hop.size < 0) stop("'parallel' must be a positive number")
# If parallel is not numeric
if (!is.numeric(parallel)) stop("'parallel' must be a numeric vector of length 1")
if (any(!(parallel %% 1 == 0),parallel < 1)) stop("'parallel' should be a positive integer")
#add silence
wav <-pastew(wave2 = silence(duration = t.display / 2, samp.rate = wave@samp.rate,
xunit = "time"), wave1 = wave, f = wave@samp.rate,
output = "Wave")
wav <-pastew(wave1 = silence(duration = t.display / 2, samp.rate = wav@samp.rate,
xunit = "time"), wave2 = wav, f = wav@samp.rate,
output = "Wave")
# resample to 44.1 kHz
wav <- resamp(wave = wav, f = wav@samp.rate, g = 44100, output = "Wave")
# adjust wl based on hope.size
if (is.null(wl))
wl <- round(wav@samp.rate * hop.size / 1000, 0)
# make wl even if odd
if ((wl %% 2) == 0) wl <- wl + 1
# number of frames
frames <- round(duration(wav) * fps, 0)
# time increase between frames
step_time <- duration(wav) / frames
img_names <- paste0(sprintf(paste0("%0",nchar(frames) + 1, "d"), 1:frames), ".temp.img.tiff")
frames
wav
x = 200
tlim <- c((x - 1) * step_time, (x - 1) * step_time + t.display)
tlim
(x - 1)
step_time
duration(wav)
frames
duration(wav) / frames
duration(wav) / frames * frames
duration(wav) +
# time increase between frames
step_time <- (duration(wav) + t.display) / frames
# time increase between frames
step_time <- (duration(wav) + t.display) / frames
step_time
# time increase between frames
step_time <- (duration(wav) - t.display) / frames
step_time
step_time * 200
x= 1
x = 200
tlim <- c((x - 1) * step_time, (x - 1) * step_time + t.display)
tlim
# time increase between frames
step_time <- (duration(wav) - t.display) / (frames - 1)
tlim <- c((x - 1) * step_time, (x - 1) * step_time + t.display)
tlim
out <- pbapply::pblapply(1:frames, function(x){
tlim <- c((x - 1) * step_time, (x - 1) * step_time + t.display)
tiff(file.path(tempdir(), img_names[x]),res = res, width = width, height = height)
spectro(wave = wav, f = wav@samp.rate, wl = 300, ovlp = 90,
flim = c(2, 10.5), tlim = tlim, scale = F, grid = F,
palette = gray.colors,  norm = F, dBref = 2*10e-5,
osc = T, colgrid="white", colwave="chocolate2",
colaxis="white", collab="white", colbg="black")
abline(v = tlim[1] + (t.display / 2), lty = 2, col = "skyblue", lwd = 2)
dev.off()
})
dev.off()
graphics.off()
out <- pbapply::pblapply(1:frames, function(x){
tlim <- c((x - 1) * step_time, (x - 1) * step_time + t.display)
tiff(file.path(tempdir(), img_names[x]),res = res, width = width, height = height)
spectro(wave = wav, f = wav@samp.rate, wl = 300, ovlp = 90,
flim = c(2, 10.5), tlim = tlim, scale = F, grid = F,
palette = gray.colors,  norm = F, dBref = 2*10e-5,
osc = T, colgrid="white", colwave="chocolate2",
colaxis="white", collab="white", colbg="black")
abline(v = tlim[1] + (t.display / 2), lty = 2, col = "skyblue", lwd = 2)
dev.off()
})
paste0("%0",nchar(frames) + 1, "d"), 1:frames)
paste0(sprintf(paste0("%0",nchar(frames) + 1, "d"), 1:frames), ".temp.img.tiff")
paste0(("%0",nchar(frames) + 1, "d"), 1:frames), ".temp.img.tiff")
paste0("%0",nchar(frames) + 1, "d"), 1:frames), ".temp.img.tiff")
paste0("%0",nchar(frames) + 1, "d"), ".temp.img.tiff")
paste0("%0",nchar(frames) + 1, "d", ".temp.img.tiff")
paste0("%0",nchar(frames) + 1, "d.temp.img.tiff")
# put together call for ffmpeg
cll1 <- paste0("ffmpeg -framerate ", fps, " -i ", tempdir(), "/", paste0("%0",nchar(frames) + 1, "d.temp.img.tiff")," -c:v libx264 -profile:v high -crf 2 -pix_fmt yuv420p -y ", temp.video)
cll1
# run ffmpeg to create video
out1 <- system(cll1, intern = TRUE, ignore.stdout = TRUE)
# add audio
cll2 <- paste0("ffmpeg -i ", temp.video, " -i ", temp.audio, " -vcodec libx264 -acodec libmp3lame -shortest -y scroll.spectro.mp4")
# run ffmpeg to add audio
out2 <- system(cll2, intern = TRUE, ignore.stdout = TRUE)
# save audio file
suppressWarnings(tuneR::writeWave(object = wav, filename = temp.audio, extensible = FALSE))
# add audio
cll2 <- paste0("ffmpeg -i ", temp.video, " -i ", temp.audio, " -vcodec libx264 -acodec libmp3lame -shortest -y scroll.spectro.mp4")
# run ffmpeg to add audio
out2 <- system(cll2, intern = TRUE, ignore.stdout = TRUE)
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = w, hop.size = 11.6, wl = NULL, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 1, pb = TRUE)
# number of frames
frames <- round(duration(wave) * fps, 0)
frames
# number of frames
frames <- round(duration(wav) * fps, 0)
frames
# time increase between frames
step_time <- duration(wave) / (frames - 1)
step_time
duration(wave)
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = w, hop.size = 11.6, wl = NULL, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 1, pb = TRUE)
# number of frames
frames <- round(duration(wave) * fps, 0)
frames
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = w, hop.size = 11.6, wl = NULL, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE)
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = w, hop.size = 11.6, wl = NULL, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE)
unlink(c(temp.video, temp.audio, list.files(path = tempdir(), full.names = TRUE, pattern = "\\.temp.img.tiff$")))
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = w, hop.size = 11.6, wl = NULL, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE)
w <- pastew(Phae.long1, Phae.long2, output = "Wave")
scrolling_spectro(wave = w, hop.size = 11.6, wl = NULL, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE)
spectro(w)
w <- Phae.long1
#add silence
w <-pastew(wave2 = silence(duration = 1, samp.rate = w@samp.rate,
xunit = "time"), wave1 = w, f = w@samp.rate,
output = "Wave")
spectro(w)
w <- Phae.long1
#add silence
w <-pastew(wave1 = silence(duration = 1, samp.rate = w@samp.rate,
xunit = "time"), wave2 = w, f = w@samp.rate,
output = "Wave")
scrolling_spectro(wave = w, hop.size = 11.6, wl = NULL, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE)
w <- Phae.long1
#add silence
w <-pastew(wave1 = silence(duration = 0.5, samp.rate = w@samp.rate,
xunit = "time"), wave2 = w, f = w@samp.rate,
output = "Wave")
scrolling_spectro(wave = w, hop.size = 11.6, wl = NULL, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE)
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = w, hop.size = 11.6, wl = NULL, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE)
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = w, hop.size = 11.6, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE)
hop.size
wl <- round(wav@samp.rate * hop.size / 1000, 0)
wl
# make wl even if odd
if ((wl %% 2) == 0) wl <- wl + 1
wl
source('~/sda5/Dropbox/R_package_testing/dynaSpec/dynaSpec/R/scrolling_spectro.R')
scrolling_spectro(wave = w, hop.size = 11.6, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE)
scrolling_spectro(wave = w, hop.size = 11.6, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-40, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE, scale = FALSE, grid = FALSE)
scrolling_spectro(wave = w, hop.size = 11.6, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-100, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE, scale = FALSE, grid = FALSE)
scrolling_spectro(wave = w, hop.size = 8, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-100, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE, scale = FALSE, grid = FALSE)
scrolling_spectro(wave = w, hop.size = 8, ovlp = 0, speed = 1, fps = 20, t.display = 1.5, collevels = seq(-100, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE, scale = FALSE, grid = FALSE, flim = c(1, 10))
scrolling_spectro(wave = w, hop.size = 8, ovlp = 70, speed = 1, fps = 50, t.display = 1.5, collevels = seq(-100, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE, scale = FALSE, grid = FALSE, flim = c(1, 10))
scrolling_spectro(wave = w, hop.size = 8, ovlp = 70, speed = 1, fps = 50, t.display = 1.5, collevels = seq(-100, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE, scale = FALSE, grid = FALSE, flim = c(1, 10), width = 1500)
scrolling_spectro(wave = w, wl = 300, ovlp = 70, speed = 1, fps = 100, t.display = 1.5, collevels = seq(-100, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE, scale = FALSE, grid = FALSE, flim = c(1, 10), width = 1500)
scrolling_spectro(wave = w, wl = 300, ovlp = 90, speed = 1, fps = 150, t.display = 1.5, collevels = seq(-100, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE, scale = FALSE, grid = FALSE, flim = c(1, 10), width = 1500, res = 120)
scrolling_spectro(wave = w, wl = 300, ovlp = 99, speed = 1, fps = 150, t.display = 1.5, collevels = seq(-100, 0, 5), pal = reverse.gray.colors.2, parallel = 3, pb = TRUE, scale = FALSE, grid = FALSE, flim = c(1, 10), width = 1500, res = 120)
